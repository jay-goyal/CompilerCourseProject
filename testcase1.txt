%Test Case: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

% The following function computes another different function value for the given inputs 
_gridFunc input parameter list[int c33, int c56, int c5]
output parameter list [real c33];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.65)*(233545-234*8))+5*c3;
	if((~(c4bbb == 90)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4);
	endif

	return [c6];
end

% The following function computes a different function value for the given inputs 
_computeTANDiffFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2-c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.66)) 
	then
		c6<--- d4cbcd5677*c4bbb;
	else
		write(c4bb56777);
	endif

	return [c777777];
end

% The following function computes another different function value for the given inputs 
_computeTANFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd56777227;
	type real : c4bbbbc;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2+c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2065)+(233.45-234+8))+5*c3;
	if((~(c4bbb == 90000)) &&& (c4bbbbbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

_unionTANfunction  input parameter list [record #two d5cc34, #point b5c6]  
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b563767;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6-2;
	b3 <--- c6+c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 * c3bd;
		b5b567 <--- b5b567 * 1;
	endwhile
	return [d3];
end

_unionfunction  input parameter list [record #two d5cc34, #point b5c6]  
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end

%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_sumN  input parameter list [int d5cc34]  
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end

%Following function computes the product of user defined real numbers
%The variable d3 maintains the sum of values
_prodN  input parameter list [int d5cc34]  
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 * c3bd;
		b5b567 <--- b5b567 * 1;
	endwhile
	return [d3];
end

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have 
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end


% The following function computes the function value for the given inputs 
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

% The following function computes a different function value for the given inputs 
_computeDiffFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

% The following function computes another different function value for the given inputs 
_computeAnDiffFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.65)*(233545-234*8))+5*c3;
	if((~(c4bbb == 90)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

% The following function computes another different function value for the given inputs 
_computeAADFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2065)*(233.45-234*8))+5*c3;
	if((~(c4bbb == 900)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.
_main 
	
	record #one
		type real:yeet;
		type real:y;
	endrecord	
	definetype record #haguna as #pointdksdlksndksndklsndlknsdlksndlksndlksndlksndlksndlksndlksndlskdnslkdnslkdnslkndlskndlksndlksnd
	definetype record #two as #linekskkskskskskkskskk
	union #four
		type #line : ln; 
		type #point: blah; 
		type #traingle:tr;
	endunion
        definetype record #three as #triangle  
	record #three 
		type #line: singla;
		type #line: jaygoyal;
	endrecord
	definetype union #four as #shape
	record #variantrecord
		type int: dog;
		type #shape: s;
	endrecord

	record #one
		type real:x;
		type real:y;
	endrecord	
	definetype record #one as #point
	definetype record #two as #line
	union #four
		type #line : ln; 
		type #point: pt; 
		type #traingle:tr;
	endunion
        definetype record #three as #triangle  
	record #three 
		type #line: base;
		type #line: height;
	endrecord
	definetype union #four as #shape
	record #variantrecord
		type int: tag;
		type #shape: s;
	endrecord

	type record #variantrecord : d4;
	type int : b5;
	type int : d5cb34567;
	type record #variantrecord: b5c6;
	b5c6 <--- b5c6.tag + d4.s.ln.beginpoint.x - b5c6.s.tr.base.beginpoint.y; 
	read(b3c45.kanda);
	read(b3c425.batata);
		c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif
	read(b3c425.poori);
	read(b3c45.bhaji);
	read(b3c45.wakanda);
	read(b3c22245.jaygoyal);
	read(b3c45.singlesingla);
	read(b3ccc433335.sanjeev);
	read(b3c45.pizza);
	read(b3c45.maths);
	read(b33335555555555.physics);
	
	read(b3c45555.chemistry);
	read(b3c444445.maths);
	read(b3c45.physics);
	read(b3bbbbc45.chemistry);
		c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif
	read(b3c45.violine);
		c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif
	read(b3c45.jasmine);
	read(b3c45.pronto);
	read(b3c45.water);
	read(b3ccccc45.air);
	if((~(c4bbb == 900)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
		endif
	read(b3c45.chemistry);
	read(b3c45.maths);
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	read(b3c45.physics);
	read(b3c45.chemistry);
	
	read(b3c45.maths);
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	read(b3c45.physics);
	read(b3c45.chemistry);
	b5 <--- b5 +1;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif
	d4 <--- b5c6 / d5cb34567;
	write(d4);
	write(d4.s.ln.beginpoint.x );
	write(b5c6.tag );
	if((~(c4bbb == 900)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif
	if((~(c4bbb == 90)) &&& (c4bbb > 178.66)) 
	then
		c6<--- d4cbcd5677/c4bbb;
		c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	else
		write(c4bbb);
	endif

	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56)) 
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
		c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.55)*(2345-234*8))+5*c3;
	endif
	return;
end

